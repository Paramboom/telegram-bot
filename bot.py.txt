import asyncio
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters

# –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª
RULES_TEXT = (
    "üìú –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:\n"
    "1. –í–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ.\n"
    "2. –ü–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.\n"
    "3. –†–µ–∫–ª–∞–º–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.\n\n"
    "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
)

async def on_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return
    if msg.sender_chat:  # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞
        await msg.reply_text(RULES_TEXT)

async def main():
    TOKEN = os.getenv("TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ Environment Variable
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.GROUPS, on_group_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
